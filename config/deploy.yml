# Name of your application. Used to uniquely configure containers.
service: check_invoice_app

# Name of the container image.
image: check_invoice_app

# Deploy to these servers.
servers:
  web:
    hosts:
      - <%= ENV["DIGITAL_OCEAN_IP"] %>
    labels:
      traefik.http.routers.check_invoice_app.rule: Host(`<%= ENV["DOMAIN"] %>`)
      traefik.http.services.check_invoice_app.loadbalancer.server.port: 80
  # job:
  #   hosts:
  #     - 192.168.0.1
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: app.example.com

# Credentials for your image host.
registry:
  # Use Docker Hub
  server: docker.io
  username: <%= ENV["DOCKER_USERNAME"] %>
  password: <%= ENV["DOCKER_PASSWORD"] %>

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  clear:
    RAILS_MASTER_KEY: <%= ENV["RAILS_MASTER_KEY"] %>
    RAILS_SERVE_STATIC_FILES: true
    RAILS_LOG_TO_STDOUT: true
    DATABASE_URL: <%= ENV["DATABASE_URL"] %>
  secret:
    - RAILS_MASTER_KEY
    - DATABASE_URL

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "check_invoice_app_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  multiarch: false
  args:
    RUBY_VERSION: 3.2.2

# Use a different ssh user than root
ssh:
  user: root

# Use accessory services (secrets come from .kamal/secrets).
# accessories:
#   db:
#     image: mysql:8.0
#     host: 192.168.0.2
#     # Change to 3306 to expose port to the world instead of just local network.
#     port: "127.0.0.1:3306:3306"
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   redis:
#     image: redis:7.0
#     host: 192.168.0.2
#     port: 6379
#     directories:

# Configure rolling deployments
rolling_deploy: true

# Configure health check
healthcheck:
  path: /up
  port: 80
  max_attempts: 10
  interval: 5
